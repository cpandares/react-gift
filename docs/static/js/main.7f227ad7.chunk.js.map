{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","hepers/getGifs.js","components/GifGrid.js","hooks/useFetchGifts.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","console","log","className","src","alt","getGifts","category","a","encodeURI","fetch","resp","json","data","gift","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","setTimeout","then","useFetchGifts","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAKaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAIVC,mBAAS,IAJC,mBAIxCC,EAJwC,KAI5BC,EAJ4B,KA6B/C,OAGI,sBAAMC,SAnBW,SAACC,GAElBA,EAAEC,iBAICJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAUlB,SAEK,uBACGO,KAAK,OACLC,MAAST,EACTU,SA/Ba,SAACP,GAExBF,EAAcE,EAAEQ,OAAOF,a,QCVhBG,EAAc,SAAC,GAAe,IAAdC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAI5B,OAFCC,QAAQC,IAAIH,EAAMC,GAId,sBAAKG,UAAU,OAAf,UACQ,qBAAKC,IAAOJ,EAAMK,IAAON,IACzB,kCAAMA,EAAN,W,uBCTNO,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGfR,EAHe,iDAGkCS,UAAUF,GAH5C,+DAKFG,MAAMV,GALJ,cAKfW,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAUD,EAAIC,GACdlB,MAAUiB,EAAIjB,MACdC,IAAG,UAAOgB,EAAIE,cAAX,aAAO,EAAYC,iBAAiBnB,QAb1B,kBAkBhBc,GAlBgB,4CAAH,sDCMTM,EAAU,SAAC,GAAkB,IAAfb,EAAc,EAAdA,SAAc,ECLZ,SAAEA,GAAa,IAAD,EAGVtB,mBAAS,CAChC4B,KAAO,GACPQ,SAAS,IALwB,mBAG9BC,EAH8B,KAGvBC,EAHuB,KAwBrC,OAhBAC,qBAAW,WAETC,YAAY,WAERnB,EAASC,GAAUmB,MAAK,SAAAV,GACpBO,EAAS,CACLV,KAAKG,EACLK,SAAQ,SAIlB,OAEF,CAAEd,IAGGe,EDhBsBK,CAAcpB,GAAjCW,EAHyB,EAG9BL,KAAaQ,EAHiB,EAGjBA,QAIpB,OAFApB,QAAQC,IAAImB,GAGR,qCACI,mCAAOd,EAAP,OACEc,GAAW,6CACb,qBACIlB,UAAU,YADd,SAIYe,EAAOH,KAAI,SAAAC,GACX,OAAS,cAAC,EAAD,eAEGA,GADAA,EAAIC,aEpB3BW,EAAe,WAAK,MAIS3C,mBAAS,CAAE,gBAJpB,mBAIrB4C,EAJqB,KAIT7C,EAJS,KAW7B,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BAGQ6C,EAAWd,KAAI,SAAAR,GAAQ,OAEnB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MCvBnCuB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7f227ad7.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport { GiftExpertApp } from \"../GiftExpertApp\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } )=> {\r\n\r\n    //const categories = ['naruto', 'dragon Ball', 'Shingeki no kyojin'];\r\n\r\n    const [inputValue, setInputValue ] = useState('') ;\r\n\r\n    const handleInpuChange = (e)=>{\r\n      // console.log(e.target.value) ;\r\n      setInputValue(e.target.value);\r\n\r\n\r\n    }   \r\n\r\n    const handleSubmit = (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n  \r\n\r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories( cats =>[inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        \r\n           \r\n        <form onSubmit= { handleSubmit }>\r\n\r\n             <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = { handleInpuChange }\r\n            />\r\n\r\n        </form>\r\n           \r\n\r\n\r\n        \r\n        \r\n    )\r\n\r\n    \r\n   \r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n} \r\n\r\n","import react from 'react';\r\n\r\n\r\nexport const GifGridItem = ({title,url})=>{\r\n\r\n        console.log(title,url);\r\n\r\n       return  (\r\n\r\n            <div className=\"card\">\r\n                    <img src= { url } alt= { title } />\r\n                    <p> { title } </p>\r\n            </div>\r\n\r\n       )\r\n\r\n}\r\n\r\n","\r\n\r\n export const getGifts = async (category)=>{\r\n    \r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=IN4Mrxuh7q4Ok2mtGSWF4bqXTPlw2iKt`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gift = data.map(img => {\r\n        return {\r\n            id      : img.id,\r\n            title   : img.title,\r\n            url     : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n   // console.log(gift);\r\n  return gift;\r\n\r\n}","//import { useEffect, useState } from \"react\";\r\n\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nimport { useFetchGifts } from \"../hooks/useFetchGifts\"\r\n\r\n\r\n\r\nexport const GifGrid = ( { category } )=>{\r\n\r\n\r\n    const {data:images, loading} = useFetchGifts(category);\r\n\r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            { loading && <p>Cargando....</p> }\r\n            <div \r\n                className=\"card-grid\">          \r\n                \r\n                    {\r\n                        images.map(img=>{\r\n                        return   <GifGridItem \r\n                            key = { img.id }\r\n                                {...img }\r\n                                />\r\n                        })\r\n\r\n                    }                   \r\n                        \r\n            </div>\r\n        </>\r\n    )\r\n\r\n\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifts } from '../hepers/getGifs'\r\n\r\nexport const useFetchGifts = ( category )=>{\r\n\r\n\r\n      const [state, setState] =  useState({\r\n          data : [],\r\n          loading: true\r\n      });\r\n\r\n      useEffect( ()=>{\r\n\r\n        setTimeout( () =>{\r\n\r\n            getGifts(category).then(img =>{\r\n                setState({\r\n                    data:img,\r\n                    loading:false\r\n                });\r\n            })\r\n\r\n        },3000)            \r\n\r\n      },[ category ])\r\n\r\n    \r\n      return state;\r\n\r\n}\r\n","import { useState } from \"react\"\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nexport const GiftExpertApp =()=> {\r\n\r\n    //const categories = ['naruto', 'dragon Ball', 'Shingeki no kyojin'];\r\n\r\n     const [categories, setCategories ] = useState([ 'dragon ball' ]) ;\r\n\r\n     /*const handleAdd = (e)=>{\r\n\r\n            setCategories([...categories, 'Shippuden']);\r\n     }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>Busca un gifs </h2>\r\n\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr></hr>\r\n          \r\n\r\n            <ol>\r\n\r\n                {\r\n                    categories.map(category =>(\r\n\r\n                        <GifGrid\r\n                            key = {category} \r\n                            category = {category} \r\n                            />\r\n                    ))\r\n                }\r\n\r\n\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GiftExpertApp } from './GiftExpertApp';\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  \r\n    <GiftExpertApp />,\r\n  \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}